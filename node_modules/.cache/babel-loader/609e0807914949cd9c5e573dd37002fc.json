{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\TocaDosGatos\\\\Documents\\\\FIPP-2022\\\\Programa\\xE7\\xE3o FullStack I\\\\Atividadefinalvc1 (2)\\\\Atividade-final-vc2 - Copia (2)\\\\frontend\\\\src\\\\componentes\\\\busca\\\\CaixaSelecao.jsx\",\n  _s = $RefreshSig$();\nimport { Container, Col, Row, Spinner, Form } from \"react-bootstrap\";\nimport { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function CaixaSelecao(_ref) {\n  _s();\n  let {\n    enderecoFonteDados,\n    campoChave,\n    campoExibicao,\n    funcaoSelecao\n  } = _ref;\n  const [ValorSelecionado, setValorSelecionado] = useState({\n    [campoChave]: 0,\n    [campoExibicao]: \"Não foi possível acessar o Banco de Dados\"\n  });\n  const [carregandoDados, setCarregandoDados] = useState(false);\n  const [dados, setDados] = useState([]);\n  useEffect(() => {\n    try {\n      setCarregandoDados(true);\n      fetch(enderecoFonteDados, {\n        method: \"GET\"\n      }).then(resposta => {\n        //if(resposta.ok){\n        return resposta.json();\n        // }\n        // else{\n        //     return ([{\n        //                [campoChave]: 0,\n        //                [campoExibicao]:\"Não foi possível acessar o Banco de Dados\"\n        //             }]);\n\n        // }\n      }).then(listaDados => {\n        setCarregandoDados(false);\n        setDados[listaDados];\n        //Preciso lembrar que a caixa de seleção tem um valor previamente selecionado\n        if (listaDados.length > 0) {\n          setValorSelecionado(listaDados[0]);\n          funcaoSelecao(listaDados[0]);\n        }\n      });\n    } catch (erro) {\n      setCarregandoDados(false);\n      setDados([{\n        [campoChave]: 0,\n        [campoExibicao]: \"Não foi possível acessar o Banco de Dados : \" + erro.message\n      }]);\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    border: true,\n    children: /*#__PURE__*/_jsxDEV(Row, {\n      children: [/*#__PURE__*/_jsxDEV(Col, {\n        md: 11,\n        children: /*#__PURE__*/_jsxDEV(Form.Select, {\n          onChange: evento => {\n            const itemSelecionado = evento.currentTarget.value;\n            const pos = dados.map(item => item[campoChave].toString()).indexOf(itemSelecionado);\n            setValorSelecionado(dados[pos]);\n            funcaoSelecao(dados[pos]);\n          },\n          children: [dados.map(item => {\n            return /*#__PURE__*/_jsxDEV(\"option\", {\n              value: item[campoChave],\n              children: item[campoExibicao]\n            }, item[campoChave], false, {\n              fileName: _jsxFileName,\n              lineNumber: 62,\n              columnNumber: 40\n            }, this);\n          }), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: \"Elemento\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Col, {\n        md: 1,\n        children: /*#__PURE__*/_jsxDEV(Spinner, {\n          className: carregandoDados ? \"visible\" : \"invisible\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 20\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 9\n  }, this);\n}\n_s(CaixaSelecao, \"+E1IDbZ3b6JUV1+zItadTChJB1I=\");\n_c = CaixaSelecao;\nvar _c;\n$RefreshReg$(_c, \"CaixaSelecao\");","map":{"version":3,"names":["Container","Col","Row","Spinner","Form","useEffect","useState","CaixaSelecao","enderecoFonteDados","campoChave","campoExibicao","funcaoSelecao","ValorSelecionado","setValorSelecionado","carregandoDados","setCarregandoDados","dados","setDados","fetch","method","then","resposta","json","listaDados","length","erro","message","evento","itemSelecionado","currentTarget","value","pos","map","item","toString","indexOf"],"sources":["C:/Users/TocaDosGatos/Documents/FIPP-2022/Programação FullStack I/Atividadefinalvc1 (2)/Atividade-final-vc2 - Copia (2)/frontend/src/componentes/busca/CaixaSelecao.jsx"],"sourcesContent":["import { Container, Col, Row, Spinner, Form } from \"react-bootstrap\";\r\nimport { useEffect, useState } from \"react\";\r\n\r\nexport default function CaixaSelecao({enderecoFonteDados, \r\n                                      campoChave,\r\n                                      campoExibicao,\r\n                                      funcaoSelecao}){\r\n    const [ValorSelecionado, setValorSelecionado] = useState({\r\n        [campoChave]: 0,\r\n        [campoExibicao]:\"Não foi possível acessar o Banco de Dados\"\r\n    });\r\n\r\n    const [carregandoDados, setCarregandoDados] = useState(false);\r\n    const [dados, setDados] = useState([]);\r\n    \r\n    useEffect(() => {\r\n        try{\r\n            setCarregandoDados(true);\r\n            fetch(enderecoFonteDados, {method:\"GET\"}).then((resposta => {\r\n                //if(resposta.ok){\r\n                    return resposta.json();\r\n                // }\r\n                // else{\r\n                //     return ([{\r\n                //                [campoChave]: 0,\r\n                //                [campoExibicao]:\"Não foi possível acessar o Banco de Dados\"\r\n                //             }]);\r\n                    \r\n                // }\r\n            })).then((listaDados) => {\r\n                setCarregandoDados(false);\r\n                setDados[listaDados];\r\n                //Preciso lembrar que a caixa de seleção tem um valor previamente selecionado\r\n                if(listaDados.length > 0){\r\n                    setValorSelecionado(listaDados[0]);\r\n                    funcaoSelecao(listaDados[0]);\r\n                }\r\n            });\r\n\r\n        }catch(erro){\r\n            setCarregandoDados(false)\r\n            setDados([{\r\n                        [campoChave]: 0,\r\n                        [campoExibicao]:\"Não foi possível acessar o Banco de Dados : \" + erro.message\r\n                      }])\r\n        }\r\n        },[]);        \r\n\r\n    return(\r\n        <Container border>\r\n            <Row>\r\n                <Col md={11}>\r\n                    <Form.Select \r\n                    onChange={(evento) => {\r\n                        const itemSelecionado = evento.currentTarget.value;\r\n                        const pos = dados.map((item) => item[campoChave].toString()).indexOf(itemSelecionado);\r\n                        setValorSelecionado(dados[pos]);\r\n                        funcaoSelecao(dados[pos]);\r\n                    }}>\r\n                        {\r\n                            dados.map((item) => {\r\n                                return <option key={item[campoChave]} \r\n                                               value={item[campoChave]}>\r\n                                               {item[campoExibicao]}     \r\n                                        </option>\r\n                            })\r\n                        }\r\n                        <option value={\"\"}>Elemento</option>\r\n                    </Form.Select>\r\n                </Col>\r\n                <Col md={1}>\r\n                   <Spinner className={carregandoDados ? \"visible\":\"invisible\"}>\r\n\r\n                   </Spinner>\r\n                </Col>                \r\n                \r\n            </Row>\r\n        </Container>\r\n    );\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}