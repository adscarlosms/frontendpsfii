{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\TocaDosGatos\\\\Documents\\\\FIPP-2023\\\\FullstackIIDP\\\\frontend\\\\src\\\\componentes\\\\busca\\\\CaixaSelecao.jsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { Col, Container, Row, Form, Spinner } from \"react-bootstrap\";\n// Depende de componentes estilizados pelo bootstrap\n// enderecoFonteDados: informa qual a url que a caixa de seleção utilizara para para recuperar os dados\n// campoChave: nos dados, qual campo é a chave primária\n// campoExibicao: Qual coluna deve ser exibida pela caixa de seleção\n// funcaoSelecao: Que é a função que receberá o objeto selecionado pelo usuário \nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function CaixaSelecao(_ref) {\n  _s();\n  let {\n    enderecoFonteDados,\n    campoChave,\n    campoExibicao,\n    funcaoSelecao\n  } = _ref;\n  const [valorSelecionado, setValorSelecionado] = useState({\n    [campoChave]: 0,\n    [campoExibicao]: \"Não foi possível obter os dados do backend\"\n  });\n  const [carregandoDados, setCarregandoDados] = useState(false);\n  const [dados, setDados] = useState([]);\n  useEffect(() => {\n    try {\n      setCarregandoDados(true);\n      fetch(enderecoFonteDados, {\n        method: \"GET\"\n      }).then(resposta => {\n        if (resposta.ok) {\n          return resposta.json();\n        } else {\n          return [{\n            [campoChave]: 0,\n            [campoExibicao]: \"Não foi possível obter os dados do backend\"\n          }];\n        }\n      }).then(listaDados => {\n        setCarregandoDados(false);\n        setDados(listaDados);\n        //lembrar que minha caixa de seleção possui um valor previamente selecionado\n        if (listaDados.length > 0) {\n          setValorSelecionado(listaDados[0]);\n          funcaoSelecao(listaDados[0]);\n        }\n      });\n    } catch (erro) {\n      setCarregandoDados(false);\n      setDados([{\n        [campoChave]: 0,\n        [campoExibicao]: \"Não foi possível obter os dados do backend\" + erro.message\n      }]);\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    border: true,\n    children: /*#__PURE__*/_jsxDEV(Row, {\n      children: [/*#__PURE__*/_jsxDEV(Col, {\n        md: 11,\n        children: /*#__PURE__*/_jsxDEV(Form.Select, {\n          onChange: evento => {\n            const itemSelecionado = evento.currentTarget.value;\n            //valorSelecionado e funcaoSelecao esperam objetos da lista\n            //gerando uma lista de ids, cpfs, codigo\n            const pos = dados.map(item => item[campoChave].toString()).indexOf(itemSelecionado);\n            setValorSelecionado(dados[pos]);\n            funcaoSelecao(dados[pos]);\n          },\n          children: dados.map(item => {\n            return /*#__PURE__*/_jsxDEV(\"option\", {\n              value: item[campoChave],\n              children: item[campoExibicao]\n            }, item[campoChave], false, {\n              fileName: _jsxFileName,\n              lineNumber: 64,\n              columnNumber: 40\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Col, {\n        md: 1,\n        children: /*#__PURE__*/_jsxDEV(Spinner, {\n          className: carregandoDados ? \"visible\" : \"invisible\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 9\n  }, this);\n}\n_s(CaixaSelecao, \"KmMfrHpZMRR6ucYCPIG4EPcsmMI=\");\n_c = CaixaSelecao;\nvar _c;\n$RefreshReg$(_c, \"CaixaSelecao\");","map":{"version":3,"names":["useEffect","useState","Col","Container","Row","Form","Spinner","CaixaSelecao","enderecoFonteDados","campoChave","campoExibicao","funcaoSelecao","valorSelecionado","setValorSelecionado","carregandoDados","setCarregandoDados","dados","setDados","fetch","method","then","resposta","ok","json","listaDados","length","erro","message","evento","itemSelecionado","currentTarget","value","pos","map","item","toString","indexOf"],"sources":["C:/Users/TocaDosGatos/Documents/FIPP-2023/FullstackIIDP/frontend/src/componentes/busca/CaixaSelecao.jsx"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport { Col, Container, Row, Form, Spinner } from \"react-bootstrap\";\r\n// Depende de componentes estilizados pelo bootstrap\r\n// enderecoFonteDados: informa qual a url que a caixa de seleção utilizara para para recuperar os dados\r\n// campoChave: nos dados, qual campo é a chave primária\r\n// campoExibicao: Qual coluna deve ser exibida pela caixa de seleção\r\n// funcaoSelecao: Que é a função que receberá o objeto selecionado pelo usuário \r\nexport default function CaixaSelecao({ enderecoFonteDados,\r\n    campoChave,\r\n    campoExibicao,\r\n    funcaoSelecao }) {\r\n    const [valorSelecionado, setValorSelecionado] = useState({\r\n        [campoChave]: 0,\r\n        [campoExibicao]: \"Não foi possível obter os dados do backend\"\r\n    });\r\n    const [carregandoDados, setCarregandoDados] = useState(false);\r\n    const [dados, setDados] = useState([])\r\n\r\n    useEffect(() => {\r\n        try {\r\n            setCarregandoDados(true);\r\n            fetch(enderecoFonteDados, { method: \"GET\" }).then((resposta) => {\r\n                if (resposta.ok) {\r\n                    return resposta.json();\r\n                }\r\n                else {\r\n                    return ([{\r\n                        [campoChave]: 0,\r\n                        [campoExibicao]: \"Não foi possível obter os dados do backend\"\r\n                    }]);\r\n                }\r\n            }).then((listaDados) => {\r\n                setCarregandoDados(false);\r\n                setDados(listaDados);\r\n                //lembrar que minha caixa de seleção possui um valor previamente selecionado\r\n                if (listaDados.length > 0){\r\n                    setValorSelecionado(listaDados[0]);\r\n                    funcaoSelecao(listaDados[0]);\r\n                }\r\n            });\r\n        } catch (erro) {\r\n            setCarregandoDados(false);\r\n            setDados([{\r\n                [campoChave]: 0,\r\n                [campoExibicao]: \"Não foi possível obter os dados do backend\" + erro.message\r\n            }]);\r\n        }\r\n    }, []);\r\n    return (\r\n        <Container border>\r\n            <Row>\r\n                <Col md={11}>\r\n                    <Form.Select \r\n                                 onChange={(evento) =>{\r\n                                    const itemSelecionado = evento.currentTarget.value;\r\n                                    //valorSelecionado e funcaoSelecao esperam objetos da lista\r\n                                                //gerando uma lista de ids, cpfs, codigo\r\n                                    const pos = dados.map((item) => item[campoChave].toString()).indexOf(itemSelecionado);\r\n                                    setValorSelecionado(dados[pos]);\r\n                                    funcaoSelecao(dados[pos]);\r\n                                 }}>\r\n                        {\r\n                            dados.map((item) => {\r\n                                return <option key={item[campoChave]}\r\n                                    value={item[campoChave]}>\r\n                                    {item[campoExibicao]}\r\n                                </option>\r\n                            })\r\n                        }\r\n\r\n                    </Form.Select>\r\n                </Col>\r\n                <Col md={1}>\r\n                    <Spinner className={carregandoDados ? \"visible\" : \"invisible\"}></Spinner>\r\n                </Col>\r\n            </Row>\r\n\r\n        </Container>\r\n    );\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}